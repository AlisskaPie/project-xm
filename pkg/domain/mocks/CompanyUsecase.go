// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "github.com/AlisskaPie/project-xm/pkg/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CompanyUsecase is an autogenerated mock type for the CompanyUsecase type
type CompanyUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, c
func (_m *CompanyUsecase) Create(ctx context.Context, c domain.CreateCompany) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCompany) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CompanyUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CompanyUsecase) GetByID(ctx context.Context, id uuid.UUID) (domain.Company, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Company
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Company); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, id, c
func (_m *CompanyUsecase) Patch(ctx context.Context, id uuid.UUID, c domain.PatchCompany) (domain.Company, error) {
	ret := _m.Called(ctx, id, c)

	var r0 domain.Company
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.PatchCompany) domain.Company); ok {
		r0 = rf(ctx, id, c)
	} else {
		r0 = ret.Get(0).(domain.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.PatchCompany) error); ok {
		r1 = rf(ctx, id, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanyUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyUsecase creates a new instance of CompanyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyUsecase(t mockConstructorTestingTNewCompanyUsecase) *CompanyUsecase {
	mock := &CompanyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
